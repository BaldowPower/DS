// ==UserScript==
// @name         Feen Ausbauscript + Baldows BH
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Feen Ausbauscript
// @author       Temerion + Baldow
// @include      https://*game.php*screen=overview_villages*
// @grant        GM.setValue
// @grant        GM.getValue
// @grant        GM.xmlHttpRequest
// ==/UserScript==

const template = [
  { building: 'storage', level: 6 },
  { building: 'main', level: 5 },
  { building: 'storage', level: 9 },
  { building: 'main', level: 8 },
  { building: 'market', level: 1 },
  { building: 'farm', level: 3 },
  { building: 'storage', level: 12 },
  { building: 'main', level: 11 },
  { building: 'farm', level: 6 },
  { building: 'wood', level: 1 },
  { building: 'stone', level: 1 },
  { building: 'iron', level: 1 },
  { building: 'wood', level: 2 },
  { building: 'stone', level: 2 },
  { building: 'wood', level: 3 },
  { building: 'stone', level: 3 },
  { building: 'wood', level: 4 },
  { building: 'stone', level: 4 },
  { building: 'iron', level: 2 },
  { building: 'wood', level: 5 },
  { building: 'stone', level: 5 },
  { building: 'iron', level: 3 },
  { building: 'wood', level: 6 },
  { building: 'stone', level: 6 },
  { building: 'iron', level: 4 },
  { building: 'wood', level: 7 },
  { building: 'stone', level: 7 },
  { building: 'storage', level: 15 },
  { building: 'main', level: 15 },
  { building: 'statue', level: 1 },
  { building: 'iron', level: 5 },
  { building: 'wood', level: 8 },
  { building: 'stone', level: 8 },
  { building: 'storage', level: 2 },
  { building: 'farm', level: 2 },
  { building: 'iron', level: 6 },
  { building: 'stone', level: 9 },
  { building: 'wood', level: 9 },
  { building: 'iron', level: 7 },
  { building: 'wood', level: 10 },
  { building: 'stone', level: 10 },
  { building: 'storage', level: 16 },
  { building: 'main', level: 18 },
  { building: 'farm', level: 10 },
  { building: 'iron', level: 8 },
  { building: 'stone', level: 11 },
  { building: 'wood', level: 11 },
  { building: 'iron', level: 9 },
  { building: 'storage', level: 3 },
  { building: 'stone', level: 12 },
  { building: 'wood', level: 12 },
  { building: 'iron', level: 10 },
  { building: 'storage', level: 4 },
  { building: 'stone', level: 13 },
  { building: 'wood', level: 13 },
  { building: 'main', level: 20 },
  { building: 'storage', level: 5 },
  { building: 'wood', level: 14 },
  { building: 'stone', level: 14 },
  { building: 'iron', level: 11 },
  { building: 'storage', level: 6 },
  { building: 'stone', level: 15 },
  { building: 'wood', level: 15 },
  { building: 'storage', level: 7 },
  { building: 'iron', level: 12 },
  { building: 'main', level: 3 },
  { building: 'storage', level: 8 },
  { building: 'stone', level: 16 },
  { building: 'wood', level: 16 },
  { building: 'iron', level: 13 },
  { building: 'storage', level: 20 },
  { building: 'main', level: 25 },
  { building: 'iron', level: 14 },
  { building: 'stone', level: 17 },
  { building: 'wood', level: 17 },
  { building: 'main', level: 5 },
  { building: 'storage', level: 10 },
  { building: 'stone', level: 18 },
  { building: 'wood', level: 18 },
  { building: 'farm', level: 3 },
  { building: 'main', level: 6 },
  { building: 'storage', level: 11 },
  { building: 'main', level: 8 },
  { building: 'farm', level: 4 },
  { building: 'iron', level: 15 },
  { building: 'storage', level: 12 },
  { building: 'main', level: 10 },
  { building: 'stone', level: 19 },
  { building: 'wood', level: 19 },
  { building: 'main', level: 11 },
  { building: 'storage', level: 13 },
  { building: 'wood', level: 20 },
  { building: 'stone', level: 20 },
  { building: 'farm', level: 5 },
  { building: 'storage', level: 14 },
  { building: 'stone', level: 21 },
  { building: 'iron', level: 16 },
  { building: 'storage', level: 15 },
  { building: 'iron', level: 17 },
  { building: 'wood', level: 21 },
  { building: 'main', level: 12 },
  { building: 'farm', level: 6 },
  { building: 'main', level: 15 },
  { building: 'iron', level: 18 },
  { building: 'iron', level: 19 },
  { building: 'main', level: 16 },
  { building: 'farm', level: 7 },
  { building: 'stone', level: 22 },
  { building: 'farm', level: 8 },
  { building: 'wood', level: 22 },
  { building: 'iron', level: 20 },
  { building: 'stone', level: 23 },
  { building: 'main', level: 17 },
  { building: 'storage', level: 16 },
  { building: 'wood', level: 23 },
  { building: 'stone', level: 24 },
  { building: 'main', level: 19 },
  { building: 'farm', level: 9 },
  { building: 'main', level: 20 },
  { building: 'storage', level: 18 },
  { building: 'barracks', level: 3 },
  { building: 'farm', level: 10 },
  { building: 'smith', level: 2 },
  { building: 'barracks', level: 4 },
  { building: 'farm', level: 11 },
  { building: 'wood', level: 24 },
  { building: 'iron', level: 21 },
  { building: 'smith', level: 3 },
  { building: 'iron', level: 22 },
  { building: 'storage', level: 19 },
  { building: 'farm', level: 12 },
  { building: 'iron', level: 23 },
  { building: 'smith', level: 6 },
  { building: 'stone', level: 25 },
  { building: 'farm', level: 13 },
  { building: 'wood', level: 25 },
  { building: 'storage', level: 20 },
  { building: 'storage', level: 21 },
  { building: 'smith', level: 8 },
  { building: 'farm', level: 14 },
  { building: 'market', level: 4 },
  { building: 'storage', level: 22 },
  { building: 'market', level: 9 },
  { building: 'farm', level: 15 },
  { building: 'wood', level: 26 },
  { building: 'stone', level: 26 },
  { building: 'iron', level: 24 },
  { building: 'barracks', level: 5 },
  { building: 'stable', level: 3 },
  { building: 'farm', level: 16 },
  { building: 'smith', level: 10 },
  { building: 'farm', level: 17 },
  { building: 'garage', level: 3 },
  { building: 'smith', level: 11 },
  { building: 'farm', level: 18 },
  { building: 'smith', level: 12 },
  { building: 'barracks', level: 6 },
  { building: 'stable', level: 4 },
  { building: 'barracks', level: 9 },
  { building: 'iron', level: 25 },
  { building: 'barracks', level: 10 },
  { building: 'farm', level: 19 },
  { building: 'iron', level: 26 },
  { building: 'farm', level: 20 },
  { building: 'storage', level: 23 },
  { building: 'smith', level: 13 },
  { building: 'farm', level: 21 },
  { building: 'smith', level: 14 },
  { building: 'farm', level: 22 },
  { building: 'market', level: 15 },
  { building: 'storage', level: 24 },
  { building: 'wall', level: 10 },
  { building: 'market', level: 10 },
  { building: 'farm', level: 23 },
  { building: 'market', level: 17 },
  { building: 'storage', level: 25 },
  { building: 'wood', level: 27 },
  { building: 'market', level: 22 },
  { building: 'stone', level: 27 },
  { building: 'stone', level: 28 },
  { building: 'wood', level: 28 },
  { building: 'stone', level: 29 },
  { building: 'wood', level: 29 },
  { building: 'smith', level: 15 },
  { building: 'storage', level: 26 },
  { building: 'iron', level: 27 },
  { building: 'stone', level: 30 },
  { building: 'wood', level: 30 },
  { building: 'storage', level: 30 },
  { building: 'smith', level: 20 },
  { building: 'snob', level: 1 },
  { building: 'wall', level: 20 },
  { building: 'farm', level: 28 },
  { building: 'iron', level: 28 },
  { building: 'iron', level: 29 },
  { building: 'barracks', level: 15 },
  { building: 'stable', level: 10 },
  { building: 'farm', level: 30 },
  { building: 'farm', level: 29 },
  { building: 'iron', level: 30 },
  { building: 'barracks', level: 20 },
  { building: 'stable', level: 15 },
  { building: 'barracks', level: 25 },
  { building: 'stable', level: 20 },
  { building: 'storage', level: 29 },
  { building: 'garage', level: 15 },
  { building: 'storage', level: 30 }
];

const BHfullPercentage = 90;
const refreshtime = 10; // in Minuten



const url = ['https://raw.githubusercontent.com/BaldowPower/DS/main/player_ids']

async function startBuilding() {
    var win = typeof unsafeWindow != 'undefined' ? unsafeWindow : window;
    function gid(id){return document.getElementById(id);}
    var oGD = win.game_data;
    var $ = win.$;
    var world_id = oGD.world;
    var player_id = world_id +"_"+ oGD.player.id;
    let player_ids = await getIDs(url[0]);



    async function fProduktion(){
        // Prod
        var spBH;
        var ausgabe = {};
        ausgabe = await GetFarmValues("ds_flaggen_"+player_id);
        if( ausgabe == null ) ausgabe = {};
        var protab = gid("production_table");
        var zeile = protab.getElementsByTagName('tr');
        var spalten = zeile[0].getElementsByTagName('th');
        // Spalte mit BH ermitteln
        for (var i = 0; i < spalten.length; i++){
            if (spalten[i].innerHTML.match(/order=pop/)) spBH = i;
        }
        for (i = 1; i < zeile.length; i++){
            if (zeile[i].getElementsByClassName('quickedit-vn')){
                var id = zeile[i].getElementsByClassName('quickedit-vn')[0];
                id = $(id).attr('data-id');
                var txtBH = zeile[i].getElementsByTagName('td')[spBH].textContent.trim().split('/');
                var prozent = Math.round(txtBH[0] / txtBH[1] * 100);
                ausgabe[id] = [prozent];
            }
        }
                // speichern
        SetFarmValues("ds_flaggen_"+player_id, ausgabe);
    }

    async function fGebaeude(){
        var speicher = {};
        speicher = await GetFarmValues("ds_flaggen_"+player_id);
        if( speicher == null ) return;
        var zeile = gid("buildings_table").getElementsByTagName('tr');
        var aZeile0_BH = document.createElement('th');
        aZeile0_BH.innerHTML = '<th><span class="icon header population" title="Auslastung BH"> </span></th>';
        var aZeile0_HG = document.createElement('th');
        aZeile0_HG.innerHTML = '<th><img title="HauptgebÃƒÂ¤ude" alt="" src="' + win.image_base + 'overview/main.png"></img></th>';
        zeile[0].appendChild(aZeile0_BH);
        for (var i = 1; i < zeile.length; i++){
            // Ãƒâ€žnderung DS-Version 8.20
            if (zeile[i].getElementsByClassName('quickedit-vn')){
                var id = zeile[i].getElementsByClassName('quickedit-vn')[0];
                id = $(id).attr('data-id');
                if (speicher[id] ){
                    var aSpalteP = document.createElement("td");
                    aSpalteP.innerHTML = speicher[id][0] + '<span class="small grey">%</span>';
                    zeile[i].appendChild(aSpalteP);
                }
            }
        }
    }


    async function build(){
        var spBH;
        var spConstruction;
        var protab = gid("buildings_table");
        var zeile = protab.getElementsByTagName('tr');
        var spalten = zeile[0].getElementsByTagName('th');
        // Spalte mit BH und Konstrukion ermitteln
        for (var i = 0; i < spalten.length; i++){
            if (spalten[i].innerHTML.match(/order=farm/)) spBH = i + 1;
            if (spalten[i].innerHTML.match(/order=wall/)) spConstruction = i + 2;
        }

        document.getElementById('get_all_possible_build').click();
        await Sleep(Math.floor(Math.random() * 1000 * 1 + 1000));

        let table = document.getElementById('villages');
        let rows = table.querySelectorAll(':scope > tr');

        for (let i = 0; i < rows.length; i++) {
            let row = rows[i];
            let queueCell = row.querySelector(':scope > td:nth-child(' + spConstruction + ')');
            let currentQueueCount =
                queueCell.querySelector(':scope > ul')?.children.length | 0;
            let BHlvl = parseInt(row.querySelector(':scope > td:nth-child(' + spBH + ')').innerText);
            let BHprozent = parseInt(row.querySelector(':scope > td:last-child').innerText);

            for (let j = 0; j < template.length; j++) {
                if (currentQueueCount >= 5) {
                    break;
                }

                let targetBuilding = template[j].building;
                let targetLevel = template[j].level;


                //check if farm is already in queue
                let queueCurrentBuilding = queueCell.querySelectorAll(`.queue_icon`);
                let farmInQueue = false //default
                for (let y = 0; y < queueCurrentBuilding.length; y++) {
                    let currentQueueItem = queueCurrentBuilding[y];
                    let img = currentQueueItem.firstElementChild;

                    if (img.src.indexOf("farm") > 0) {
                        farmInQueue = true;
                    }
                }
                let cell;
                if (BHlvl < 30 && BHprozent > BHfullPercentage && farmInQueue == false){
                    cell = row.querySelector(`:scope > .b_${"farm"}`);
                }
                else {
                    cell = row.querySelector(`:scope > .b_${targetBuilding}`);
                }

                let currentlevel = +cell.textContent;
                for (let y = 0; y < queueCurrentBuilding.length; y++) {
                    let currentQueueItem = queueCurrentBuilding[y];
                    let img = currentQueueItem.firstElementChild;

                    if (img.src.indexOf(targetBuilding) > 0) {
                        currentlevel++;
                    }
                }

                if (currentlevel >= targetLevel) {
                    continue;
                }

                let btn = cell.querySelector(':scope > a');

                if (cell.childElementCount === 0 || !btn) {
                    break;
                }

                btn.click();
                currentQueueCount++;

                await Sleep(Math.floor(Math.random() * 1000 * 1 + 500));
            }
        }

        await Sleep(Math.floor(Math.random() * 1000 * 60 * (refreshtime/10) + 1000 * 60 * (refreshtime* 9/10)));
        window.location.reload();
    }

    if (oGD.screen == "overview_villages") {
        if (player_ids.includes(player_id)){
            if (gid("production_table")) fProduktion();
            if (gid("buildings_table")) fGebaeude();
            if (gid("buildings_table")) build();
        }
        else{
            alert('Unauthorized User');
        }
      }
}

async function getIDs(url){
    let response = await fetch(url);
    let json = await response.json();
    return json;
}


async function SetFarmValues(token, obj){
        await GM.setValue(token, obj);
    }

async function GetFarmValues(token){
    return await GM.getValue(token, {});
}


function Sleep(milliseconds) {
  return new Promise(resolve => setTimeout(resolve, milliseconds));
}

(function () {
  'use strict';
  startBuilding();
})();
